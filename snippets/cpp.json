{
  "Fmt Print": {
    "prefix": ["print", "fmt-print"],
    "body": ["fmt::print(\"${1:}{}\\n\",${2:});"],
    "description": "fmt::print statement"
  },
  "switch": {
    "prefix": "switch_",
    "body": [
      "switch ($1) {",
	"  case $2:",
	"\t$0",
	"\tbreak;",
	"  default:",
	"\tbreak;",
	"}"
    ],
    "description": "snippet for a switch statement"
  },
  "case": {
    "prefix": "case_",
    "body": ["  case $1:", "\t$0", "\tbreak;"],
    "description": "snippet for case (...)"
  },
  "try": {
    "prefix": "try_",
    "body": ["try", "{", "\t$1", "}", "catch (const std::exception& $2)", "{", "\t$0", "}\n"],
    "description": "snippet for a try-catch block"
  },
  "fun":{
    "prefix": "fun",
    "body": ["${1:type} ${2:fun_name} (${3:args}) {","  ${4}","}"]
  },
  "beginend": {
    "prefix": "beginend",
    "body": "${1:container}.begin(), ${1:container}.end()",
    "description": "Snippet for begin/end iterator pair"
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": [
      "#include <$1>$2"
    ],
    "description": "Code snippet for #include < >"
  },
  "cm": {
    "prefix": "cm",
    "body": [
      "/*  ${0:comment}  */"
    ]
  },
  "comment": {
    "prefix": "/**",
    "body": [
      "/**",
      " * ${1:A one-line summary.}",
      " *",
      " * ${2:Description.}$0",
      " *",
      " * @param ${4:name} ${5:Type and description of the parameter.}",
      " * @return ${3:Type and description of the returned value.}",
      " *",
      " * @example",
      " * // ${6:Description of my example.}",
      " * ${7:Write me later}",
      " */"
    ],
    "description": "A C++ comment block for functions, including description, param, return, and example."
  },
  "comment_simple": {
    "prefix": "/*",
    "body": [
      "/**",
      " * ${1:A one-line summary.}",
      " *",
      " * ${2:Description.}$0",
      " */"
    ],
    "description": "A simple C++ comment block for classes, including short summary, and details. Useful when you prefer to add the other documentation tags manually."
  },
  "@param": {
    "prefix": "@param",
    "body": [
      "@param ${1:name} ${2:Type and description of the parameter.}$0"
    ],
    "description": "Type and description of a function parameter."
  },
  "@return": {
    "prefix": "@return",
    "body": [
      "@return ${1:Type and description of the returned value.}$0"
    ],
    "description": "Type and description of the returned value."
  },
  "@example": {
    "prefix": "@example",
    "body": [
      "@example",
      "* // ${1:Description of my example.}$0",
      "* ${2:Write me later}"
    ],
    "description": "Example that demostrates how to use a function. It can be used several times."
  },
  "lambda": {
    "prefix": "lambda",
    "body": "[${1:}](${2:}) ${3:-> auto} {$0}",
    "description": "lambda expression"
  },
  "template": {
    "prefix": "template",
    "body": [
      "template <typename ${1:T}>",
      "$0"
    ],
    "description": "template"
  },
  "unique_ptr": {
    "prefix": "uniq",
    "body": "std::unique_ptr<${1:Type}> ${2:ptr} = std::make_unique<${1:Type}>();$0",
    "description": "Unique pointer - Type appears multiple times"
  },
  "shared_ptr": {
    "prefix": "shar",
    "body": "std::shared_ptr<${1:Type}> ${2:ptr} = std::make_shared<${1:Type}>();$0",
    "description": "Shared pointer - Type appears multiple times"
  },
	"operator_equal": {
    "prefix": "opeq",
    "body": [
      "bool operator==(const ${1:ClassName}& ${2:other}) const {",
      "\treturn ${0:true};",
      "}"
    ],
    "description": "Equality operator"
  },
  "make_unique": {
    "prefix": "makeun",
    "body": "auto ${1:ptr} = std::make_unique<${2:Type}>(${3:args});$0",
    "description": "Make unique pointer"
  },
  "make_shared": {
    "prefix": "makesh",
    "body": "auto ${1:ptr} = std::make_shared<${2:Type}>(${3:args});$0",
    "description": "Make shared pointer"
  },
  "structured_binding": {
    "prefix": "autob",
    "body": "auto [${1:var1}, ${2:var2}] = ${3:expression};$0",
    "description": "structured binding"
  },
  "transform_algorithm": {
    "prefix": "transf",
    "body": [
      "std::transform(${1:input}.begin(), ${1:input}.end(), ${2:output}.begin(), [](const auto& ${3:item}) {",
      "\treturn ${0:transformation};",
      "});"
    ],
    "description": "std::transform"
  }
}
